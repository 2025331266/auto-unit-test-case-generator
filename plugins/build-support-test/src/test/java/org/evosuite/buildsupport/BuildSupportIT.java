package org.evosuite.buildsupport;

import org.apache.commons.io.FileUtils;
import org.apache.maven.it.Verifier;
import org.evosuite.runtime.InitializingListener;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Properties;

/**
 * Make sure that tests generated by EvoSuite can be run from different build tools.
 * In particular, here we are interested to see if instrumentation is properly done.
 *
 * Note: the tests do not have instrumentation code, and so they will pass only if
 * JUnit listener does it
 */
public class BuildSupportIT {

    private final Path simple = Paths.get("projects","simple");

    private String getEvoSuiteVersion(){
        //update version if run from IDE instead of Maven
        return System.getProperty("evosuiteVersion","1.0.4-SNAPSHOT");
    }

    @Before
    @After
    public void clean() throws Exception {
        Verifier maven = getMaven(simple);
        maven.executeGoal("clean");

        FileUtils.deleteQuietly(simple.resolve("log.txt").toFile());
        FileUtils.deleteQuietly(simple.resolve(InitializingListener.getScaffoldingListFilePath()).toFile());
    }

    @Test
    public void testMaven() throws Exception{
        Verifier maven = getMaven(simple);
        maven.executeGoal("test");
        maven.verifyTextInLog("Running com.testbuild.support.FooTest");
        maven.verifyTextInLog("Tests run: 2, Failures: 0, Errors: 0, Skipped: 0");
    }






    private Verifier getMaven(Path targetProject) throws Exception{
        Verifier verifier  = new Verifier(targetProject.toAbsolutePath().toString());
        Properties props = new Properties(System.getProperties());
        props.put("evosuiteVersion", getEvoSuiteVersion());
        verifier.setSystemProperties(props);
        return verifier;
    }

}
